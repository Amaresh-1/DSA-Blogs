Examples of Time Complexity:

O(1) – Constant Time:-
-------------------------
Accessing an element in an array by index takes constant time, regardless of the array size
int[] arr = {1, 2, 3, 4, 5};
int element = arr[2];  // =Always O(1), directly accessing the element

O(log n) – Logarithmic Time:-
--------------------------------
Binary search in a sorted array halves the search space in each step

int binarySearch(int[] arr, int target) {
    int low = 0, high = arr.length - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;  // O(log n)
}

O(n) – Linear Time:-
----------------------
Traversing an array takes time proportional to the number of elements

for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);  // O(n)
}

O(n log n) – Linearithmic Time:-
----------------------------------
This time complexity is often seen in efficient sorting algorithms, where each element is processed in logarithmic time.
Merge sort is an example of an O(n log n) algorithm that recursively divides and merges arrays.

void mergeSort(int[] arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}        // O(n log n) time

O(n^2) – Quadratic Time:-
----------------------------
Quadratic time complexity means the algorithm performs operations proportional to the square of the input size. This often occurs with nested loops.

void bubbleSort(int[] arr) {
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }  // O(n^2) time
}

O(2^n) – Exponential Time:-
-----------------------------
Exponential time complexity algorithms double the work with each additional input element. 
They often occur in recursive algorithms that solve smaller subproblems.

Recursive Fibonacci sequence:

int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);  // O(2^n) time
}

O(n!) – Factorial Time:-
----------------------------
Factorial time complexity algorithms are highly inefficient and grow extremely fast with input size. 
These are typically found in brute-force algorithms that generate all permutations of a set.

Example: Generate All Permutations of a String (O(n!))

class PermutationExample {
    
    // Method to generate all permutations of a string
    static void permute(String str, String result) {
        // Base case: if the input string is empty, print the result
        if (str.length() == 0) {
            System.out.println(result);
            return;
        }

        // Recursively generate permutations by choosing each character
        for (int i = 0; i < str.length(); i++) {
            char chosen = str.charAt(i);
            String remaining = str.substring(0, i) + str.substring(i + 1);
            permute(remaining, result + chosen);
        }
    }

}






