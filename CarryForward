Maximum Sum Subarray (Kadane's Algorithm)
Problem Statement: Given an array of integers, find the contiguous subarray with the largest sum.
=====================================================================================================
public class MaxSumSubarray {
    public static int maxSubArraySum(int[] arr) {
        int maxSum = arr[0];  // Initialize with the first element
        int currentSum = arr[0];

        for (int i = 1; i < arr.length; i++) {
            currentSum = Math.max(arr[i], currentSum + arr[i]);
            maxSum = Math.max(maxSum, currentSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        System.out.println("Maximum Sum Subarray: " + maxSubArraySum(arr));  // Output: 6 ([4, -1, 2, 1])
    }
}

Count Subarrays with Even Sum
Problem Statement: Given an array, count the number of subarrays where the sum of elements is even:
=====================================================================================================
public class EvenSumSubarrays {
    public static int countEvenSumSubarrays(int[] arr) {
        int evenCount = 1;  // Sum 0 is even, so initialize evenCount with 1
        int oddCount = 0;
        int currentSum = 0;
        int count = 0;

        for (int num : arr) {
            currentSum += num;

            if (currentSum % 2 == 0) {
                count += evenCount;
                evenCount++;
            } else {
                count += oddCount;
                oddCount++;
            }
        }

        return count;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4};
        System.out.println("Count of subarrays with even sum: " + countEvenSumSubarrays(arr));  // Output: 6
    }
}

Count Subarrays with a Given Sum
Problem Statement: Given an array of integers and a target sum, count how many subarrays have a sum equal to the target:
===========================================================================================================================

import java.util.HashMap;

public class SubarraySumCount {
    public static int subarraySum(int[] arr, int target) {
        HashMap<Integer, Integer> prefixSumMap = new HashMap<>();
        int currentSum = 0;
        int count = 0;

        // Initialize prefix sum map with zero sum base case
        prefixSumMap.put(0, 1);

        for (int num : arr) {
            currentSum += num;

            // Check if (currentSum - target) exists in the map
            if (prefixSumMap.containsKey(currentSum - target)) {
                count += prefixSumMap.get(currentSum - target);
            }

            // Update prefix sum map
            prefixSumMap.put(currentSum, prefixSumMap.getOrDefault(currentSum, 0) + 1);
        }

        return count;
    }

    public static void main(String[] args) {
        int[] arr = {1, 1, 1};
        int target = 2;
        System.out.println("Count of Subarrays with Sum " + target + ": " + subarraySum(arr, target));  // Output: 2
    }
}

Find the Longest Subarray with Equal Number of 0s and 1s
Problem Statement: Given a binary array, find the length of the longest subarray with equal numbers of 0s and 1s.
===================================================================================================================
import java.util.HashMap;

public class LongestEqualZeroesOnes {
    public static int findMaxLength(int[] nums) {
        HashMap<Integer, Integer> sumMap = new HashMap<>();
        int maxLength = 0, sum = 0;

        // Initialize with sum 0 at index -1 for edge case handling
        sumMap.put(0, -1);

        for (int i = 0; i < nums.length; i++) {
            sum += (nums[i] == 0) ? -1 : 1;

            if (sumMap.containsKey(sum)) {
                maxLength = Math.max(maxLength, i - sumMap.get(sum));
            } else {
                sumMap.put(sum, i);
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        int[] nums = {0, 1, 0};
        System.out.println("Longest subarray with equal 0s and 1s: " + findMaxLength(nums));  // Output: 2
    }
}
Maximum Product Subarray
Problem Statement: Given an array, find the contiguous subarray with the largest product.
==========================================================================================
public class MaxProductSubarray {
    public static int maxProduct(int[] nums) {
        int maxProduct = nums[0], minProduct = nums[0], result = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < 0) {
                // Swap max and min when encountering a negative number
                int temp = maxProduct;
                maxProduct = minProduct;
                minProduct = temp;
            }

            maxProduct = Math.max(nums[i], maxProduct * nums[i]);
            minProduct = Math.min(nums[i], minProduct * nums[i]);

            result = Math.max(result, maxProduct);
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, -2, 4};
        System.out.println("Maximum Product Subarray: " + maxProduct(nums));  // Output: 6
    }
}

